---
layout: post
title:  ソフトウェア詳細設計 レビュー観点
date:   2023-08-08 21:00:00 +0900
categories: How-To
tags: review
---

## レビュー

### 妥当性の観点

* 関数構成が明確であるか
* インターフェースの整合性を確認したか
  * 引数、戻り値、コンテキスト
* データサイズは妥当か。とくに数値計算後にオーバーフローしていないか
* マイコンの機能
  * GPIO
    * 使用するレジスタを明記して管理できているか
    * 入力/出力の設定が正しくできているか
  * 割込みコントローラ
    * 使用する割込みを明記して管理できているか
    * 多重割込みを有効にしている場合
      * 割込みの優先度は適切か
      * スタックのサイズを検討したか
      * 同一割込みを複数許可していないか
  * 不揮発メモリ
    * 未書き込みの状態で読みだした場合の処理が明確になっているか
    * 読みだしエラーが発生した場合の処理が明確になっているか
    * 書き込みエラーが発生した場合の処理が明確になっているか
    * 1面書きだとデータが消える場合がある。2面書きを検討したか
    * 読み出しタイミングは明確であり、適切か
    * 書き込みタイミングは明確であり、適切か
      * *不必要な書き込みが発生すると、他のデータが書き込めなくなり、不揮発メモリの寿命が短くなる*
* 割込みやマルチタスクの処理
  * 割込みや別タスクでの処理であることを明記しているか
  * アクセスするデータに排他制御は必要ないか
    * 排他制御をする場合
      * 開始/終了が必ずセットになっているか
      * 排他制御中の処理は最小になっているか

### 実現可能性の観点

* 上位文章で実現できないことがある場合はDeviesionとして明記/管理できているか

### テスト可能性の観点

* テスト環境
  * スタブ/ドライバの有無
  * 実機/シミュレータ
  * テスト基盤(テストポート)
* 非機能を評価するためのテストコード

### 運用・保守の観点

* 変更しやすい設計となっているか
  * 機能の分割は妥当か
  * 機能が複雑に結合していないか

### 追跡可能性の観点

* 上位文書とのトレーサビリティが取れているか
  * 一意で分かりやすいタグをつけているか

### 一貫性の観点

* 上位文章との矛盾はないか
* 文章内で矛盾はないか
* 文章内で抜け漏れはないか
  * データの入力元を記載できているか
  * データの出力先を記載できているか
  * 文章で突然出てきたデータやふるまいの記載はないか

### 完全性の観点

* 想定されるすべてのコンテキストで動作に問題はないか
* 一意に解釈できる表現になっているか
